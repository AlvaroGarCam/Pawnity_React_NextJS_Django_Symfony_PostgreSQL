# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    organizer_refresh_token_secret: '%env(REFRESH_TOKEN_SECRET)%'
    organizer_jwt_public_key: '%env(resolve:JWT_PUBLIC_KEY)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/{DependencyInjection,Entity,Tests,Kernel.php}'
    App\Service\ExampleService:
        public: true

    App\Organizer\Presentation\Assembler\Request\ProfileRequestAssembler:
        arguments:
            $projectDir: '%kernel.project_dir%'
    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    
    # Asegúrate de que los controladores están configurados correctamente
    App\Organizer\Presentation\InAdapter\:
        resource: '../src/Organizer/Presentation/InAdapter/'
        tags: ['controller.service_arguments']

    App\Event\Presentation\InAdapter\:
        resource: '../src/Event/Presentation/InAdapter/'
        tags: ['controller.service_arguments']

    App\Pet\Presentation\InAdapter\:
        resource: '../src/Pet/Presentation/InAdapter/'
        tags: ['controller.service_arguments']
    
    App\Organizer\Infrastructure\Security\RefreshTokenGenerator:
        arguments:
            $secret: '%organizer_refresh_token_secret%'
            
    App\Organizer\Application\UseCase\InPort\RefreshSessionInterface:
        alias: App\Organizer\Application\UseCase\Command\RefreshSession\RefreshSessionService
        public: true

    App\Organizer\Infrastructure\Middleware\IsOrganizer:
        arguments:
            $publicKey: '%env(resolve:JWT_PUBLIC_KEY)%'
        tags:
            - { name: 'kernel.event_subscriber' }
            
    App\Shared\Exception\GlobalExceptionHandler:
        tags:
            - { name: kernel.event_listener, event: kernel.exception, method: onKernelException, priority: 255 }
    
    App\Organizer\Application\UseCase\Command\RefreshSession\RefreshSessionService:
        arguments:
            $jwtSecret: '%organizer_refresh_token_secret%'
            $jwtPublicKey: '%organizer_jwt_public_key%'

    App\Event\Infrastructure\Security\JwtTokenExtractor:
        arguments:
            $publicKey: '%env(resolve:JWT_PUBLIC_KEY)%'
            $projectDir: '%kernel.project_dir%'
            
    App\Organizer\Presentation\Assembler\Request\UpdateProfileRequestAssembler:
        arguments:
            $projectDir: '%kernel.project_dir%'
    
    App\Organizer\Application\UseCase\Command\LogoutOrganizer\LogoutOrganizerHandler:
        public: true
        autowire: true
    
    App\TicketInfo\Domain\OutPort\TicketInfoRepositoryInterface:
        alias: App\TicketInfo\Infrastructure\OutAdapter\Doctrine\TicketInfoRepositoryAdapter

    App\TicketInfo\Application\UseCase\InPort\CreateTicketInfoInterface:
        alias: App\TicketInfo\Application\UseCase\Command\CreateTicketInfo\CreateTicketInfoService
        public: false

    App\TicketInfo\Application\UseCase\InPort\GetTicketInfosByEventSlugInterface:
        alias: App\TicketInfo\Application\UseCase\Query\GetTicketInfosByEventSlug\GetTicketInfosByEventSlugQueryService
        public: false
    
    App\TicketInfo\Application\UseCase\Command\UpdateTicketInfo\UpdateTicketInfoCommandHandler:
        autowire: true
        autoconfigure: true
        public: false

    App\TicketInfo\Application\UseCase\InPort\UpdateTicketInfoInterface:
        alias: App\TicketInfo\Application\UseCase\Command\UpdateTicketInfo\UpdateTicketInfoService
        public: false
    
    App\TicketInfo\Application\UseCase\InPort\ToggleTicketInfoInterface:
        alias: App\TicketInfo\Application\UseCase\Command\ToggleTicketInfo\ToggleTicketInfoService
        public: false
        
    App\Complement\Domain\OutPort\ComplementRepositoryInterface:
        alias: App\Complement\Infrastructure\OutAdapter\Doctrine\ComplementRepositoryAdapter

    App\Complement\Application\UseCase\InPort\CreateComplementInterface:
        alias: App\Complement\Application\UseCase\Command\CreateComplement\CreateComplementService
        public: false

    App\Event\Domain\OutPort\SubEventRepositoryInterface:
        alias: App\Event\Infrastructure\OutAdapter\Doctrine\SubEventRepositoryAdapter

    App\Event\Application\UseCase\InPort\CreateSubEventInterface:
        alias: App\Event\Application\UseCase\Command\CreateSubEvent\CreateSubEventService
        public: false
    
    App\Pet\Presentation\Assemblers\Request\CreatePetRequestAssembler:
        autowire: true
        autoconfigure: true

    App\Pet\Presentation\InAdapter\Processors\CreatePetProcessor:
        arguments:
            $handler: '@App\Pet\Application\UseCase\Command\CreatePet\CreatePetCommandHandler'
            $assembler: '@App\Pet\Presentation\Assemblers\Request\CreatePetRequestAssembler'
        tags: ['controller.service_arguments']
    
    App\Pet\Application\UseCase\Command\UpdatePet\UpdatePetCommandHandler:
        autowire: true
        autoconfigure: true
        public: true
        arguments:
            $repository: '@App\Pet\Domain\OutPort\PetRepositoryInterface'

    App\Pet\Domain\OutPort\PetRepositoryInterface: '@App\Pet\Infrastructure\OutAdapter\Doctrine\PetRepositoryAdapter'

    App\Pet\Infrastructure\OutAdapter\Doctrine\PetRepositoryAdapter:
        autowire: true
        autoconfigure: true
        public: true
    
    App\Pet\Presentation\Assemblers\Request\UpdatePetRequestAssembler:
        autowire: true
        autoconfigure: true
        public: true

    App\Pet\Presentation\Assemblers\Request\TogglePetActiveRequestAssembler:
        autowire: true
        autoconfigure: true
        public: true
    
    App\Pet\Presentation\AdapterIn\Providers\GetPetsByOrganizerProvider:
        autowire: true
        autoconfigure: true
        public: true

    App\Pet\Application\UseCase\Query\GetPetsByOrganizer\GetPetsByOrganizerQueryHandler:
        autowire: true
        autoconfigure: true
    
    App\Pet\Presentation\AdapterIn\Providers\GetAdoptionsByOrgProvider:
        autowire: true
        autoconfigure: true
        public: true

    App\Pet\Application\UseCase\Query\GetAdoptionsByOrg\GetAdoptionsByOrgQueryHandler:
        autowire: true
        autoconfigure: true

    App\Pet\Domain\OutPort\AdoptionRepositoryInterface: '@App\Pet\Infrastructure\OutAdapter\Doctrine\AdoptionRepositoryAdapter'

    App\Pet\Infrastructure\OutAdapter\Doctrine\AdoptionRepositoryAdapter:
        autowire: true
        autoconfigure: true
    
    App\Pet\Presentation\AdapterIn\Providers\GetSponsorshipsByOrgProvider:
        autowire: true
        autoconfigure: true
        public: true

    App\Pet\Application\UseCase\Query\GetSponsorshipsByOrg\GetSponsorshipsByOrgQueryHandler:
        autowire: true
        autoconfigure: true

    App\Pet\Domain\OutPort\SponsorshipRepositoryInterface: '@App\Pet\Infrastructure\OutAdapter\Doctrine\SponsorshipRepositoryAdapter'

    App\Pet\Infrastructure\OutAdapter\Doctrine\SponsorshipRepositoryAdapter:
        autowire: true
        autoconfigure: true
