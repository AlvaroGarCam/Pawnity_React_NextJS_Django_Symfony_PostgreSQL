security:
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    providers:
        users_in_memory: { memory: null }
        app_organizer_provider:
            entity:
                class: App\Organizer\Domain\Entity\Organizer
                property: id

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        # Primero definimos el firewall para las rutas API:
        api:
            pattern: ^/organizer
            stateless: true
            provider: app_organizer_provider
            jwt: ~
        # Luego, el firewall main para el resto de rutas
        main:
            pattern: ^/(?!organizer)
            lazy: true
            provider: users_in_memory

    access_control:
        # Permitir el acceso anónimo al login, si está dentro de /organizer/login
        - { path: ^/organizer/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        # Para el resto de rutas en /organizer, se requiere autenticación
        - { path: ^/organizer, roles: IS_AUTHENTICATED_FULLY }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            App\Organizer\Domain\Entity\Organizer:
                algorithm: argon2id
                memory_cost: 65536
                time_cost: 4
                threads: 2
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
