services:
  # nextjs:
  #   build:
  #     context: ./full-stack-nextjs
  #     dockerfile: Dockerfile
  #   container_name: nextjs-container
  #   ports:
  #     - "5173:5173"
  #   volumes:
  #     - ./full-stack-nextjs:/app
  #     - /app/node_modules
  #   command: npm run dev -- -p 5173

  django:
    build:
      context: ./backend-django
      dockerfile: Dockerfile
    container_name: django_container
    ports:
      - "8010:8010"
    volumes:
      - ./backend-django:/app
    environment:
      DEBUG: "true"
      DATABASE_URL: "postgresql://postgres:12345678@postgres:5432/Event"
      REDIS_HOST: "redis-container"
      REDIS_PORT: 6380
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    depends_on:
      - postgres
      - redis

  resend:
    build:
      context: ./resend-express
    container_name: resend-container
    ports:
      - "3010:3010"
    volumes:
      - ./resend-express:/app
      - /app/node_modules
    depends_on:
      - postgres
      - redis
    environment:
      RESEND_API_KEY: ${RESEND_API_KEY}
    command: >
      sh -c "npm install && node app/server.js"

  ultramsg:
    build:
      context: ./ultramsg-fastify
    container_name: ultramsg-container
    ports:
      - "3011:3011"
    volumes:
      - ./ultramsg-fastify:/usr/src/app
      - /usr/src/app/node_modules
    environment:
      ULTRAMSG_INSTANCE_ID: ${ULTRAMSG_INSTANCE_ID}
      ULTRAMSG_TOKEN: ${ULTRAMSG_TOKEN}
      REDIS_HOST: redis-container
      REDIS_PORT: 6380
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    command: >
      sh -c "npm install && npm run dev"

  redis:
    image: redis:latest
    container_name: redis-container
    ports:
      - "6379:6379"
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    command: [ "redis-server", "--requirepass", "${REDIS_PASSWORD}" ]
    volumes:
      - redis_data:/data

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin-container
    restart: always
    ports:
      - "8094:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    depends_on:
      - postgres

  nginx-proxy:
    image: nginx:1.27.3
    container_name: nginx-proxy
    ports:
      - "8099:80"
    volumes:
      - ./nginx-proxy/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - django
  
  stripe:
    build:
      context: ./stripe-payment
    container_name: stripe-container
    ports:
      - "3012:3012"
    volumes:
      - ./stripe-payment:/app
      - /app/node_modules
    environment:
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
    command: >
      sh -c "npm install && node server.js"

  # symfony-p:
  #   build:
  #     context: ./backend-symfony-Pawnity
  #     dockerfile: Dockerfile
  #   container_name: p-symfony-container
  #   restart: always
  #   ports:
  #     - "9091:80"
  #   volumes:
  #     - ./backend-symfony-Pawnity:/var/www/html
  #   environment:
  #     DATABASE_URL: "postgresql://postgres:12345678@postgres:5432/Event?serverVersion=16&charset=utf8"
  #   depends_on:
  #     - postgres
  #   command: >
  #     apache2-foreground

  # symfony-e:
  #   build:
  #     context: ./backend-symfony-EventEco
  #     dockerfile: Dockerfile
  #   container_name: e-symfony-container
  #   restart: always
  #   ports:
  #     - "8091:80"
  #   volumes:
  #     - ./backend-symfony-EventEco:/var/www/html
  #   environment:
  #     DATABASE_URL: "postgresql://postgres:12345678@postgres:5432/Event?serverVersion=16&charset=utf8"
  #   depends_on:
  #     - postgres
  #   command: >
  #     apache2-foreground
    
  springboot_payment:
    build:
      context: ./backend-spring_boot
    container_name: spring_boot_container
    ports:
      - "8079:8079"
    command: >
      bash -c "java -jar app.jar"

  postgres:
    image: postgres:17
    container_name: postgres-container
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 12345678
      POSTGRES_DB: Event
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/Event.sql:/docker-entrypoint-initdb.d/1-init.sql

  # phpdoc:
  #   image: phpdoc/phpdoc:latest
  #   container_name: phpdoc-container
  #   volumes:
  #     - .:/app
  #   working_dir: /app
  #   entrypoint: ["phpdoc"]
    
volumes:
  postgres_data:
  redis_data:
